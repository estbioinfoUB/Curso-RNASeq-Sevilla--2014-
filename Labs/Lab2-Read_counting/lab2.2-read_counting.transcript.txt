In this module, we'll introduce the genomic ranges package,
which is an extension of IRanges to the genomic space.
Most importantly these contain a sequence name.

So here we're saying an IRange on chromosome z,
and it can also contain strand information and sequence lengths.
Sequences correspond generally to chromosomes.
So here if we print out the GRanges object,
we see that we have two ranges, zero metadata columns.
And it gives the sequence names as an rle which we'll discuss later.
It gives the IRanges and the strand, also as an rle And the bottom
it prints the sequence lengths.
We've specified that chromosome z is 100 base pairs long.
So like with IRanges, we can shift the GRanges,
and it will move the starts and ends by 10 base pairs to the right.
We can also shift by 80.
But notice that if we shift by 80, these will go off the end of the chromosome.
So the one that started at five and ended at 10, now starts at 85
and ends at 115.
And genomic ranges package gives us an error
that says that the ranges contain values outside of the sequence bounds.
If we wrap this in a trim function it will make sure
that these end at the chromosome end and then don't go over it.
The metadata columns we mentioned previously,
can be accessed by using the function mcals for metadata columns.
Before we have zero columns here.
We can add columns by using mcals plus the dollar sign.
So if we want to add the numbers -1 and 4 to the value column,
we can create it like so.
And now we have an additional column which is a numeric,
and has these two values.
There's an additional class in the GRanges
package, which is called GRanges list.

GRanges list is an object which groups GRanges together.
We can create a second GRanges object called gr2.
And let's get rid of the values from the original GRanges object that we had.
We'll set those values to null.
We see they're gone.
And now we can create a new GRanges list by wrapping
these two in a function call.
So gr and gr2.
And now this object contains two GRanges.
It's a GRanges list of length two, where the first GRanges has two ranges
and the second GRanges has three ranges.
The most obvious example of a GRanges list would be grouping axons by gene,
or grouping axons by transcript.
You can ask for the length and this is giving the number of GRanges.
And you can ask for the first element, which returns the first GRanges.
And if you specify metadata columns to the GRanges list,
these will be assigned to each GRanges object in the list.
There's only space for two.

Once we've created sets of GRanges or GRanges list objects,
one common thing we might need to do is to find overlaps between objects.
So let's create two GRanges objects.
The first one, will have five ranges.
So 1 to 5, 11 to 15, 21 to 25.
And the second object will have two ranges.
Both GRanges objects are on the same sequence, chromosome z.
And it looks like they might have some overlap.
So we'll use the find overlaps function to find the overlaps.
If you look at that help page for find overlaps,
you can see that there's a lot of different arguments here.
But the first two, query and subject, are the most important.
And there's also a number of other functions which are described here.
If you want to count overlaps, you can use the count overlaps function.
And we'll talk about these more later in the course.
But let's look at the output of the find overlaps function.
So it's a hits object, which has length three,
and this gives us the three different overlaps which occurred.
So the table here tells us that the third element of the query
intersected with the first element of the subject.
And these are given as integer vectors.
So the third element of gr1, intersected with the first element of gr2.
And likewise the fourth intersected with the first, and the fourth intersected
with the second.
And we can see that indeed the fourth element of gr1
does overlap the second element of gr2.
Using the rules that were described by the defaults in the
find overlaps function.

And these defaults can be changed.
Another way to get after this is to use the over function, %over%.
And this gives a logical vector.
So for the five ranges in gr1, it gives a logical vector
describing which of these have any overlap with the ranges in the second,
so gr2.
And if we use that as a subset, so a logical sub-setting,
we returned those ranges in gr1, which had some overlap with gr2.
I'll conclude this module by introducing two objects which pop up now and then.
It's a good idea just to know what they represent.
First the rle.
This is an object which is defined by IRanges.
But also there's a similar object in base r which is a run length encoding.
And the meaning of this is that if you have
a vector, which repeats certain values, you can save memory.
By instead of storing each value, you save the number, and then
the number of times that that number's repeated.
I'll give you an example.
Here we have a vector with certain repeated values.
For instance, the last one is repeated 20 times.
And if we save this as an rle, using the rle function,
we see that it's represented, in a compact form,
with the values and the lengths that each value is repeated.
The first value, 1, is repeated three times.
And then we get a repeat of zero.
And then value -2 is repeated three times.
And if we use the str function, which gives our compact presentation,
we see that in fact it's just storing these values.
Instead of storing all the numbers, we're
just storing the compact representation.
If we have such an rle object, and we want
to peer into it in different regions, we can construct a views object.
Views is a virtual class, which contains the subject,
and then a number of views, which are essentially IRanges into that object.
So for example, we had this rle R, and let's say we want to create two views.
One which starts at 4 and ends at 7, a second which starts at 2 and ends at 6.
If we enter this in, we can see we've constructed
this view, which starts at 4 and 7.
And then it peers into the rle, and gives us
those values which were contained there.
But it's actually only a virtual class, in that
it didn't deconstruct the first rle.
But instead we've just saved the rle and a number of windows or views into it.
And so this is not only for use with rle.
You can also use the views constructor for FASTA files,
for example, if you want to look into genome sequence or other objects.

